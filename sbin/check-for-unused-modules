#!/usr/bin/perl

# Copyright (C) 2018 Thorsten Kukuk
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# in Version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

=head1 NAME

check-for-unused-modules - check for not needed SLE Modules

=head1 SYNOPSIS

check-for-unused-modules

=head1 DESCRIPTION

Check every registered module on a SLE system, if this is used or could be
removed.

=head1 OPTIONS

  -c|--config <file>  Use different configuration file
  -v|--verbose         More verbose output
  --usage                Print usage
  --man                  Display manual page
  -h|-?                    Help

=cut

use strict;
use warnings;
use Pod::Usage;
use XML::Twig;
use Config::IniFiles;

#
# process command line arguments
#
use Getopt::Long;
my $help = 0;
my $man = 0;
my $usage = 0;
my $configfile = '/etc/update-checker.conf';
my $verbose = 0;
my $output = "stdout";

GetOptions('c|config=s' => \$configfile,
	   'v|verbose' => \$verbose,
           'man' => \$man,
           'usage' => \$usage,
           'help|h|?' => \$help) or pod2usage(2);
pod2usage(0) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(-exitstatus => 0, -verbose => 0) if $usage;

if (-r $configfile) {
    my $cfg = new Config::IniFiles(-file => $configfile);
    if (defined $cfg) {
        $output = $cfg->val("global", "output", "stdout");
    }
}

my $zypper_output;
my $zypper_installed_products;
my $found = 0;

print "Calling zypper refresh -f --services\n" if $verbose;
$zypper_output = `zypper refresh -f --services`;
print "Calling zypper --no-refresh --xml products -i\n" if $verbose;
$zypper_installed_products = `zypper --no-refresh --xml products -i 2>&1`;
print "Calling zypper --no-refresh --xml services\n" if $verbose;
$zypper_output = `zypper --no-refresh --xml services 2>&1`;
my $Parser =
    new XML::Twig(twig_handlers=>{'stream/service-list/service' => \&GetServiceList});
$Parser->parse($zypper_output);

if ($found == 0) {
    print "No unused Modules found\n";
}

exit;

sub GetServiceList
{
    my ($t, $service) = @_;
    my $repo_args = "";
    my $product_summary = "Unknown";
    my $product_name = "";
    my $product_id = "Unknown";
    my @repos = $service->children('repo');

    # print "$service->{'att'}->{'alias'}\n";

    if ($service->{'att'}->{'alias'} =~ /^SMT-/) {
	# Looks like this is coming from SMT, which means one service file for all products.

	my %products = ();

	foreach my $repo (@repos) {
	    my $product = $repo->{'att'}->{'alias'};
	    $product =~ s/.*://;
	    $product =~ s/-Pool$//;
	    $product =~ s/-Updates$//;
	    $products{$product} = "$products{$product} -r $repo->{'att'}->{'alias'}"
		if $repo->{'att'}->{'enabled'};
	    print "$product\n";
	}

    } else {
	# Registered against SCC

	foreach my $repo (@repos) {
	    $repo_args = "$repo_args -r $repo->{'att'}->{'alias'}" if $repo->{'att'}->{'enabled'};
	}

	# Now the interesting part: some repos have the same product multiple times
	# (update of *-release package), other repos contain unknown products, which
	# are not installed (PackageHub :( ). Take the installed products and look, if
	# this ones are available in a repo and use only that. So we ignore not installed
	# or duplicate products.
	print "Calling zypper --xml --no-refresh products $repo_args\n" if $verbose;
	my $zypper_repo_products = `zypper --xml --no-refresh products $repo_args`;
	my $prodparser = new XML::Twig;
	$prodparser->parse($zypper_repo_products);
	my $root = $prodparser->root;
	my $prodlist = $root->first_child('product-list');
	my @repo_products = $prodlist->children('product');

	my $ins_prodparser = new XML::Twig;
	$ins_prodparser->parse($zypper_installed_products);
	my $ins_root = $ins_prodparser->root;
	my $ins_prodlist = $ins_root->first_child('product-list');
	my @installed_products = $ins_prodlist->children('product');
	my @products = ();

	foreach my $ins_product (@installed_products) {
	    foreach my $repo_product (@repo_products) {
		if ($repo_product->{'att'}->{'name'} eq $ins_product->{'att'}->{'name'}) {
		    push @products, $ins_product;
		    last;
		}
	    }
	}

	if (scalar @products != 1) {
	    my $num = scalar @products;
	    print "ERROR: $service->{'att'}->{'alias'}: Wrong number of installed products: $num\n";
	    print "       Result can be wrong\n";
	}

	foreach my $product (@products) {
	    $product_summary = $product->{'att'}->{'summary'};
	    $product_name = $product->{'att'}->{'name'};
	    $product_id = "$product->{'att'}->{'name'}/$product->{'att'}->{'version'}/$product->{'att'}->{'arch'}";
	}

	print "zypper --xml --no-refresh packages -i $repo_args |grep ^i |grep -v $product_name-release |wc -l\n" if $verbose;
	my $zypper_packages = `zypper --xml --no-refresh packages -i $repo_args |grep ^i |grep -v $product_name-release |wc -l`;
	chomp $zypper_packages;

	$found=1 if ($zypper_packages == 0);

	if ($verbose) {
	    print "$product_summary: $product_id ($zypper_packages)\n";
	} elsif ($zypper_packages == 0) {
	    print "$product_summary\n";
	    print "    SUSEConnect -d -p $product_id\n";
	}
    }
}
